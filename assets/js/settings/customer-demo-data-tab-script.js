/**
 * Demo Data Settings Script
 *
 * @package     WP_Customer
 * @subpackage  Assets/JS/Settings
 * @version     1.0.0
 * @author      arisciwek
 *
 * Path: /wp-customer/assets/js/settings/demo-data-tab-script.js
 *
 * Description: Handles demo data generation functionality in the settings page
 *              Menangani:
 *              - AJAX requests for data generation
 *              - Dependencies checking
 *              - UI feedback and messages
 *              - Development mode integration
 *
 * Dependencies:
 * - jQuery
 * - WordPress AJAX
 *
 * Changelog:
 * 1.0.0 - 2024-02-18
 * - Initial implementation
 * - Added demo data generation
 * - Added dependency checking
 * - Added development mode integration
 */

jQuery(document).ready(function($) {
    // Check dependencies on page load
    checkDependencies();

    function checkDependencies() {  
        $('.customer-generate-demo-data[data-requires]').each(function() {
            const button = $(this);
            const requiredType = button.data('requires');
            
            // Check data existence via AJAX
            $.ajax({
                url: ajaxurl,
                type: 'POST',
                data: {
                    action: 'customer_check_demo_data',
                    type: requiredType,
                    nonce: button.data('check-nonce')
                },
                success: function(response) {
                    if (response.success) {
                        const hasData = response.data.has_data;
                        button.prop('disabled', !hasData)
                              .toggleClass('ready', hasData);
                        
                        if (hasData) {
                            button.attr('title', `${requiredType} data exists (${response.data.count} records)`);
                        } else {
                            button.attr('title', `Requires ${requiredType} data to be generated first`);
                        }
                    }
                },
                error: function() {
                    button.prop('disabled', true)
                          .attr('title', 'Error checking data status');
                }
            });
        });
    }

    function checkTypeGenerated(type) {
        // Check if type has been generated by checking if related button is disabled
        const relatedButton = $(`.customer-generate-demo-data[data-type="${type}"]`);
        return relatedButton.prop('disabled');
    }

    $('.customer-generate-demo-data').on('click', function(e) {
        e.preventDefault();
        
        const button = $(this);
        const type = button.data('type');
        const nonce = button.data('nonce');
        
        console.log('Button clicked:', {
            type: type,
            nonce: nonce,
            disabled: button.prop('disabled'),
            dataAttributes: button.data()
        });

        // Check if button should be disabled
        if (button.prop('disabled')) {
            return;
        }
        
        // Disable button while processing
        button.prop('disabled', true);
        
        $.ajax({
            url: ajaxurl,
            type: 'POST',
            data: {
                action: 'customer_generate_demo_data',
                type: type,
                nonce: nonce
            },
            beforeSend: function(xhr) {
                console.log('Sending AJAX request:', {
                    type: type,
                    nonce: nonce
                });
            },
            success: function(response) {
                // Re-enable button
                button.prop('disabled', false);
                
                const messageDiv = $('#demo-data-messages');
                messageDiv.removeClass('notice-error notice-success notice-warning').empty();
                
                if (response.success) {
                    messageDiv.addClass('notice notice-success').html('<p>' + response.data.message + '</p>');
                    
                    // Check dependencies after successful generation
                    checkDependencies();
                } else {
                    // Different styling for development mode off vs other errors
                    if (response.data.type === 'dev_mode_off') {
                        messageDiv.addClass('notice notice-warning').html('<p>' + response.data.message + '</p>');
                    } else {
                        messageDiv.addClass('notice notice-error').html('<p>' + response.data.message + '</p>');
                    }
                }
            },
            error: function() {
                // Re-enable button
                button.prop('disabled', false);
                
                const messageDiv = $('#demo-data-messages');
                messageDiv.removeClass('notice-error notice-success notice-warning')
                    .addClass('notice notice-error')
                    .html('<p>An unexpected error occurred while generating demo data.</p>');
            }
        });
    });
});
